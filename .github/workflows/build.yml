name: Build and Push Docker Image

on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "adopt"
          java-version: "21"

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Create application.yml from secret
        run: |
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_LOCAL_YML }}" | base64 --decode > src/main/resources/application-local.yml
          echo "${{ secrets.APPLICATION_JWT_YML }}" | base64 --decode > src/main/resources/application-jwt.yml

# 3. Gradle 빌드 (jar 파일 생성)
      - name: Build jar file
        run: |
          ./gradlew clean build -x test --no-build-cache

      # 4. Docker 로그인
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 5. `application.yml` 파일 복원
      - name: Restore application.yml
        run: |
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_LOCAL_YML }}" | base64 --decode > src/main/resources/application-local.yml
          echo "${{ secrets.APPLICATION_JWT_YML }}" | base64 --decode > src/main/resources/application-jwt.yml
          
          ls -l src/main/resources/

      # 6. Docker 이미지 빌드
      - name: Build Docker Image
        run: |
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/roomfit-server:${{ github.sha }} .

      # 7. Docker 이미지 Push
      - name: Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/roomfit-server:${{ github.sha }}
